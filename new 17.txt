import React, { useState, useEffect } from 'react';

const LoginForm = () => {
  const [posts, setPosts] = useState([]);
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });

  const [showPassword, setShowPassword] = useState(false);
  const [loggedIn, setLoggedIn] = useState(false);

  const handleInputChange = (event) => {
    setFormData({
      ...formData,
      [event.target.name]: event.target.value,
    });
  };

  const handleTogglePassword = () => {
    setShowPassword(!showPassword);
  };

  const handleLogin = async (event) => {
    event.preventDefault();

    // API endpoint for authentication
    const authEndpoint = 'http://127.0.1.1:10808/login';

    try {
      // Perform the login using form data
      const response = await fetch(authEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams(formData).toString(),
      });

      // Check if the response is successful
      if (response.ok) {
        const accessToken = (await response.json()).access_token;
        setLoggedIn(true);
      } else {
        console.error('Login failed. Invalid credentials or other error.');
      }
    } catch (error) {
      console.error('Error during login:', error.message);
    }
  };

  useEffect(() => {
    const fetchPosts = async (accessToken) => {
      try {
        const response = await fetch('http://127.0.1.1:10808/posts/1', {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        });

        if (response.ok) {
          const postData = await response.json();
          setPosts([postData]);
        } else {
          console.error('Error fetching post data:', response.status);
        }
      } catch (error) {
        console.error('Error during post data fetch:', error.message);
      }
    };

    if (loggedIn) {
      // Get the access token from wherever it is stored after login
      const accessToken = ''; // Replace with actual storage mechanism or state

      fetchPosts(accessToken);
    }
  }, [loggedIn]);

 return (
    <div className='container'>
      <div className='panel' style={{ padding: '20px' }}>
        <h2>Login Form</h2>

        <form onSubmit={handleLogin}>
          <div className='mb-3 mt-3'>
            <label htmlFor='username' className='form-label'>
              Username/Email
            </label>
            <input
              type='email'
              className='form-control'
              id='username'
              name='username'
              onChange={handleInputChange}
              value={formData.username}
            />
          </div>

          <div className='mb-3'>
            <label htmlFor='password' className='form-label'>
              Password
            </label>
            <div className='input-group'>
              <input
                type={showPassword ? 'text' : 'password'}
                className='form-control'
                id='password'
                name='password'
                onChange={handleInputChange}
                value={formData.password}
              />
              <button
                type='button'
                className='btn btn-outline-secondary'
                onClick={handleTogglePassword}
              >
                {showPassword ? 'Hide' : 'Show'}
              </button>
            </div>
          </div>

          <button type='submit' className='btn btn-primary'>
            Login
          </button>
        </form>

        <table className='table table-striped table-bordered table-hover'>
        <thead>
          <tr>
            <th>ID</th>
            <th>Email</th>
            <th>Created at</th>
          </tr> 
        </thead>       
        <tbody>
    
            <tr key={posts.id}>
            <td> {posts.id}</td>
            <td> {posts.email}</td>
            <td> {posts.created_at}</td>
            </tr>

        </tbody>
   
      </table>


      </div>
    </div>
  );
};

export default LoginForm;

